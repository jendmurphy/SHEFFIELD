#  HP by type, amongst pokemon barchart
ggplot(data = pokemon,
aes(x = HP, y = Type))+
geom_boxplot()
#  HP by type, amongst pokemon barchart
ggplot(data = pokemon,
aes(x = HP, colour = Type))+
geom_density()
#  To turn the graph on its side, use cood_flip
ggplot(pokemon, aes(Type))+
geom_bar()+
coord_flip()
pokemon %>%
group_by(Type) %>%
summarise(HPB = mena(HP)) %>%
ggplot(aes(x = Type, y = HPB))+
geom_col()+   #  column chart which is like  a bar chart   same as: geom_bar(stat = "identity")
coord_flip()
pokemon %>%  #  data set
group_by(Type) %>%  #  group this data by type
summarise(HPB = mean(HP)) %>%  #  using HPB to avoid ovewriting the variable HP
ggplot(aes(x = Type, y = HPB))+
geom_col()+   #  column chart which is like  a bar chart   same as: geom_bar(stat = "identity")
coord_flip()
pokemon %>%  #  data set
group_by(Type) %>%  #  group this data by type
summarise(AttackB = mean(Attack)) %>%
ggplot(aes(x = reorder(Type, AttackB),  #  REORDERS THE X BY THE VARIABLE ATTACK B
y = AttackB))+
geom_col()+   #  column chart which is like  a bar chart   same as: geom_bar(stat = "identity")
coord_flip()
pokemon %>%  #  data set
group_by(Type) %>%  #  group this data by type
summarise(DefenseB = mean(Defense)) %>%
ggplot(aes(x = reorder(Type, DefenseB),  #  REORDERS THE X BY THE VARIABLE ATTACK B
y = DefenseB))+
geom_col()+   #  column chart which is like  a bar chart   same as: geom_bar(stat = "identity")
coord_flip()
# Using some filtering?
install.packages(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
tarantino <- tarantino
View(tarantino)
ggplot(tarantino, aes(word))+
geom_bar()
tarantino %>%
group_by(word) %>%  #  group by the word
summarise(howmany = n()) %>%  # n just means count
filter(howmany >20) %>%  #  filters everything where howmany is >20
ggplot(aes(x = reorder(word, howmany),howmany))+
geom_col()+
coord_flip()
#  Draw a bar plot of the words used, only including ones that are used over 20 times.
tarantino %>%
group_by(word) %>%  #  group by the word
summarise(howmany = n()) %>%  # n just means count
filter(howmany >20) %>%  #  filters everything where howmany is >20
na.omit %>%  #  Omits the NAs from the chart
ggplot(aes(x = reorder(word, howmany),howmany))+
geom_col()+  #  column chart, same as bar chart with stat = identity
coord_flip() #
#  To colour in the graph so that the distirbution across the films is showed
tarantino %>%
group_by(word) %>%  #  group by the word
na.omit %>%
mutate(howmany = n()) %>%  # mutate is used to create a new variable from something that exists
ungroup %>%
filter(howmany >20) %>%  #  filters everything where howmany is >20
ggplot(aes(x = reorder(word, howmany),
fill = movie))+
geom_bar()+  #  column chart, same as bar chart with stat = identity
coord_flip() #
#  To colour in the graph so that the distirbution across the films is showed
tarantino_2 <- tarantino %>%
group_by(word) %>%  #  group by the word
na.omit %>%
mutate(howmany = n()) %>%  # mutate is used to create a new variable from something that exists
ungroup %>%
filter(howmany >20) %>%  #  filters everything where howmany is >20
ggplot(aes(x = reorder(word, howmany),
fill = movie))+
geom_bar()+  #  column chart, same as bar chart with stat = identity
coord_flip() #
#  To colour in the graph so that the distirbution across the films is showed
tarantino_2 <- tarantino %>%
group_by(word) %>%  #  group by the word
na.omit %>%
mutate(howmany = n()) %>%  # mutate is used to create a new variable from something that exists
ungroup %>%
filter(howmany >20)  #  filters everything where howmany is >20
View(tarantino_2)
ggplot(tarantino_2, aes(x = reorder(word, howmany),
fill = movie))+
geom_bar()+  #  column chart, same as bar chart with stat = identity
coord_flip() #
#  Plot again - this time use dodge to split.
ggplot(tarantino_2, aes(x = reorder(word, howmany),
fill = movie))+
geom_bar(position = dodge)+  #  introduce dodge to split out the colour bars.
coord_flip()
#  Plot again - this time use dodge to split.
ggplot(tarantino_2, aes(x = reorder(word, howmany),
fill = movie))+
geom_bar(position = "dodge")+  #  introduce dodge to split out the colour bars.
coord_flip()
#  PLot to use position adjustmnet FILL
ggplot(tarantino_2, aes(x = reorder(word, howmany),
fill = movie))+
geom_bar(position = "fill")+  #  introduce dodge to split out the colour bars.
coord_flip()
#  PLot to use position adjustmnet FILL.  Makes all of the bars the same length, but removes the freqency - good if you want to know the distributiion but not bothered about the absolute numbers.
ggplot(tarantino_2, aes(x = movie,
fill = word))+
geom_bar(position = "fill")+  #  introduce dodge to split out the colour bars.
coord_flip()
#  The pokemon dataset!  Download from the internet
pokemon <- read.csv("https://bit.ly/2HZhf")
#  The pokemon dataset!  Download from the internet
pokemon <- read.csv("https://bit.ly/2HZhf")
#  The pokemon dataset!  Download from the internet
pokemon <- read.csv("http://bit.ly/2HZhf")
#  The pokemon dataset!  Download from the internet
pokemon <- read.csv("http://bit.ly/2HZhfvs")
#  Bar chart of different types of pokemon, acroding to which generation pokemon are introduced in.
pokemon %>%
group_by(generation) %>%
na.omit %>%
ggplot(aes(Type))+
geom_bar()
#  Bar chart of different types of pokemon, acroding to which generation pokemon are introduced in.
pokemon %>%
group_by(Type) %>%
na.omit %>%
mutate(howmany = n()) %>%
ungroup() %>%
ggplot(aes(Type), fill = generation)+
geom_bar(position = "fill")+
coord_flip()
#  Bar chart of different types of pokemon, acroding to which generation pokemon are introduced in.
pokemon %>%
group_by(Type) %>%
na.omit %>%
mutate(howmany = n()) %>%
ungroup() %>%
ggplot(aes(Type, fill = generation))+
geom_bar(position = "fill")+
coord_flip()
#  Bar chart of different types of pokemon, acroding to which generation pokemon are introduced in.
pokemon %>%
group_by(Type) %>%
na.omit %>%
mutate(howmany = n()) %>%
ungroup() %>%
ggplot(aes(Type, fill = generation))+
geom_bar(position = "dodge")+
coord_flip()
ggplot(tarantino_2, aes(reorder(word,howmany),howmany))+
geom_col()+
coord_flip()
ggplot(tarantino_2, aes(x = reorder(word,howmany),howmany))+
geom_col()+
coord_flip()+
facet_wrap(~ movie)  #  ~ is needed, even it it is only one variable for faceting
ggplot(tarantino_2, aes(x = reorder(word,howmany),howmany))+
geom_col()+
coord_flip()+
facet_wrap(~ movie, scales = free)  #  ~ is needed, even it it is only one variable for faceting
ggplot(tarantino_2, aes(x = reorder(word,howmany),howmany))+
geom_col()+
coord_flip()+
facet_wrap(~ movie, scales = "free")  #  ~ is needed, even it it is only one variable for faceting
library(gapminder)
install.packages("gapminder")
library(gapminder)
names(gapminder)
gap <- gapminder
View(gap)
ggplot(gapminder, aes(gdpPercap,
lifeExp))+
geom_point()
gap %>%
mutate(log_gpd_per_capita = log(gdpPercap)) %>%
ggplot(aes(log_gdp_per_capita, lifeExp))+
geom_point()
gap %>%
mutate(log_gpdpercap = log(gdpPercap)) %>%
ggplot(aes(log_gdppercap, lifeExp))+
geom_point()
gap %>%
mutate(log_gpdpercap = log(gdpPercap)) %>%
ggplot(aes(log_gdppercap, lifeExp))+
geom_point()
gap %>%
mutate(log_gdppercap = log(gdpPercap)) %>%
ggplot(aes(log_gdppercap, lifeExp))+
geom_point()
ggplot(gap, aes(log(gdpPercap), lifeExp))+
geom_point()
#  Alternatively this can be done inline within ggplot.
ggplot(gap, aes(log(gdpPercap), lifeExp))+
geom_point()+
geom_smooth(method = "lm") #  This adds a regression fit line.
#  Finally we can use the scale command
ggplot(gap, aes(gdpPercap,
lifeExp,
size = pop))+ # Size the points by population
geom_point(alpha = 0.3)+ #  This makes the points TRANSPARENT
geom_smooth(method = "lm")+ #  This adds a regression fit line.
scale_x_log10() # This pots on a log scale
#  Finally we can use the scale command
ggplot(gap, aes(gdpPercap,
lifeExp,
size = pop,
colour = continent))+ # Size the points by population
geom_point(alpha = 0.3)+ #  This makes the points TRANSPARENT
geom_smooth(method = "lm")+ #  This adds a regression fit line.
scale_x_log10() # This plots on a log scale
#  Finally we can use the scale command
ggplot(gap, aes(gdpPercap,
lifeExp,
size = pop,))+ # Size the points by population
geom_point(alpha = 0.3)+ #  This makes the points TRANSPARENT
geom_smooth(method = "lm")+ #  This adds a regression fit line.
scale_x_log10()+
facet_wrap(~ continent, scales = "free")
#  Finally we can use the scale command
ggplot(gap, aes(gdpPercap,
lifeExp,
size = pop, colour = continent))+ # Size the points by population
geom_point(alpha = 0.3)+ #  This makes the points TRANSPARENT
geom_smooth(method = "lm")+ #  This adds a regression fit line.
scale_x_log10()+
facet_wrap(~ continent, scales = "free")
gapminder %>% group_by(continent, year) %>%
summarise (log_gdp_per_cap_sum = sum(log(gdpPercap)),
life_exp_sum = sum(lifeExp),
pop_sum = sum(as.numeric(pop)),
n_countries = n()) %>%
mutate(mean_log_gdp_per_cap = log_gdsp_per_cap_sum/n_countries,
mean_life_exp = life_exp_sum/n_countries,
mean_pop = pop_sum/n_countries) %>%
ggplot(aes(mean_log_gdp_percap, mean_life_exp, label = year, colour = continent, size = mean_pop))+
geom_point()
gapminder %>% group_by(continent, year) %>%
summarise (log_gdp_per_cap_sum = sum(log(gdpPercap)),
life_exp_sum = sum(lifeExp),
pop_sum = sum(as.numeric(pop)),
n_countries = n()) %>%
mutate(mean_log_gdp_per_cap = log_gdp_per_cap_sum/n_countries,
mean_life_exp = life_exp_sum/n_countries,
mean_pop = pop_sum/n_countries) %>%
ggplot(aes(mean_log_gdp_percap, mean_life_exp, label = year, colour = continent, size = mean_pop))+
geom_point()
gapminder %>% group_by(continent, year) %>%
summarise (log_gdp_per_cap_sum = sum(log(gdpPercap)),
life_exp_sum = sum(lifeExp),
pop_sum = sum(as.numeric(pop)),
n_countries = n()) %>%
mutate(mean_log_gdp_per_cap = log_gdp_per_cap_sum/n_countries,
mean_life_exp = life_exp_sum/n_countries,
mean_pop = pop_sum/n_countries) %>%
ggplot(aes(mean_log_gdp_per_cap, mean_life_exp, label = year, colour = continent, size = mean_pop))+
geom_point()
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
#  Summarising and plotting
gapminder %>% group_by(continent, year) %>%
summarise (log_gdp_per_cap_sum = sum(log(gdpPercap)),
life_exp_sum = sum(lifeExp),
pop_sum = sum(as.numeric(pop)),
n_countries = n()) %>%
mutate(mean_log_gdp_per_cap = log_gdp_per_cap_sum/n_countries,
mean_life_exp = life_exp_sum/n_countries,
mean_pop = pop_sum/n_countries) %>%
ggplot(aes(mean_log_gdp_per_cap, mean_life_exp, label = year, colour = continent, size = mean_pop))+
geom_point()+
geom_label_repel()
#  Summarising and plotting
gapminder %>% group_by(continent, year) %>%
summarise (log_gdp_per_cap_sum = sum(log(gdpPercap)),
life_exp_sum = sum(lifeExp),
pop_sum = sum(as.numeric(pop)),
n_countries = n()) %>%
mutate(mean_log_gdp_per_cap = log_gdp_per_cap_sum/n_countries,
mean_life_exp = life_exp_sum/n_countries,
mean_pop = pop_sum/n_countries) %>%
ggplot(aes(mean_log_gdp_per_cap, mean_life_exp, label = year, colour = continent))+
geom_point(aes(size = mean_pop))+
geom_label_repel()
#  MIDWEST DATA TASK
data <- midwest
View(data)
ggplot(data, aes(x = percollege, y= popdensity))+
geom_point()
ggplot(data, aes(x = percollege, y= log(popdensity))+
geom_point()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal))
#  MIDWEST DATA TASK
data <- midwest
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))
View(data)
data <- data%>%
group_by(state) %>%
mutate(popweight = pop_sum/sum(pop_sum)) %>%
ungroup
data <- data%>%
group_by(state) %>%
mutate(popweight = popsum/sum(popsum)) %>%
ungroup
data <- data%>%
group_by(state) %>%
mutate(popweight = poptotal/sum(poptotal)) %>%
ungroup
View(data)
data %>%
mutate(percol_w = popweight * percollege) %>%
mutate(popden_w = popweight * popdensity) %>%
group_by(state) %>%
ggplot(aes(x = sum(percol_w), y = sum(popden_w), colour = state))+
geom_point()
data %>%
mutate(percol_w = popweight * percollege) %>%
mutate(popden_w = popweight * popdensity) %>%
group_by(state) %>%
ggplot(aes(x = sum(percol_w), y = sum(log(popden_w)), colour = state))+
geom_point()
data <- data%>%
mutate(percol_w = popweight * percollege) %>%
mutate(popden_w = popweight * popdensity) %>%
group_by(state) %>%
ggplot(aes(x = sum(percol_w), y = sum(log(popden_w)), colour = state))+
geom_point()
data <- midwest
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))
data <- data%>%
group_by(state) %>%
mutate(popweight = poptotal/sum(poptotal)) %>%
ungroup
data <- data%>%
mutate(percol_w = popweight * percollege) %>%
mutate(popden_w = popweight * popdensity) %>%
data <- data%>%
mutate(percol_w = popweight * percollege) %>%
mutate(popden_w = popweight * popdensity)
data%>%
group_by(state) %>%
ggplot(aes(x = sum(percol_w), y = sum(log(popden_w)), colour = state))+
geom_point()
election <-
read.csv("http://bit.ly/2yr0ozn")
election <-
read.csv("http://bit.ly/2yr0oZn")
election <- read.csv("https://bit.ly/2yr0oZn")
election <- read.csv("https://bit.ly/2yr0ozn")
election <- read.csv("https://bit.ly/2yr0OZn"
election <- read.csv("https://bit.ly/2yr0OZn")
election <- read.csv("https://bit.ly/2yr0OZn")
election <- read.csv("https://bit.ly/2yr0OZn")
data%>%
group_by(state) %>%
mutate(col = sum(percol_w))%>%
mutate(pop = sum(popden_w))%>%
mutate(poptot = sum(poptotal)%>%
ggplot(aes(x = sum(col),
y = sum(log(pop)),
colour = state))+
geom_point(size = poptot)
data%>%
group_by(state) %>%
mutate(col = sum(percol_w))%>%
mutate(pop = sum(popden_w))%>%
mutate(poptot = sum(poptotal)%>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point(size = poptot)
#  Group by state and then sum the weighted columns.  The sum of the weighted columns can then be plotted
data <- data%>%
group_by(state) %>%
mutate(col = sum(percol_w))%>%
mutate(pop = sum(popden_w))%>%
mutate(poptot = sum(poptotal))%>%
ungroup()
#  Group by state and then sum the weighted columns.  The sum of the weighted columns can then be plotted
data <- data %>%
group_by(state) %>%
mutate(col = sum(percol_w))%>%
mutate(pop = sum(popden_w))%>%
mutate(poptot = sum(poptotal))%>%
ungroup()
ggplot(data, aes(x = col,
y = log(pop),
colour = state))+
geom_point(size = poptot)
View(data)
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point(size = poptot)
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point()
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point(aes(size = poptot))
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point(aes(size = poptot))+
geom_label_repel()
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point(aes(size = poptot))+
geom_label_repel(aes(label = state))
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state))+
geom_point(aes(size = poptot))+
geom_label_repel(aes(label = state))
data %>%
group_by(state) %>%
ggplot(aes(x = col,
y = log(pop),
colour = state,
label = state))+
geom_point(aes(size = poptot))+
geom_label_repel()
data %>%
group_by(state) # %>%
View(data)
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))
library(ggthemes)
install.packages(ggthemes)
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
theme_economist()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
theme_excel()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
theme_fivethirtyeight()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
theme_economist_white()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
labs(x="Percentage of population who attended college",
y= "Log of population density",
title = "Population density by percentage college attendance in US MidWest counties")
theme_economist_white()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
labs(x="Percentage of population who attended college",
y= "Log of population density",
title = "Population density by percentage college attendance in US MidWest counties",
subtitle = "All Counties represented, coloured by State")
theme_economist_white()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
labs(x="Percentage of population who attended college",
y= "Log of population density",
title = "Population density by percentage college attendance in US MidWest counties",
subtitle = "All Counties represented, coloured by State",
ggsave("saved_graph.png"))
theme_economist_white()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
labs(x="Percentage of population who attended college",
y= "Log of population density",
title = "Population density by percentage college attendance in US MidWest counties",
subtitle = "All Counties represented, coloured by State",
ggsave("saved_graph.pdf"))
theme_economist_white()
ggplot(data, aes(x = percollege, y= log(popdensity)))+
geom_point(aes(size = poptotal, colour = state))+
labs(x="Percentage of population who attended college",
y= "Log of population density",
title = "Population density by percentage college attendance in US MidWest counties",
subtitle = "All Counties represented, coloured by State")+
theme_economist_white()+
ggsave("saved_graph.pdf")
